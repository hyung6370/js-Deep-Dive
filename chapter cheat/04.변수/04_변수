# **04.변수**
- 자바스크립트 엔진은 연산을 위해 표현식(expression)을 해석(parsing)하여 연산자와 피연산자를 파악한다.
- 메모리에 피연산자 등의 데이터를 기억하고 CPU를 사용해 연산한다.
## **메모리**
메모리는 데이터를 저장할 수 있는 메모리 셀(memory cell)의 집합체이다.
- 메모리 셀 하나의 크기는 1바이트(8비트)이며, 1바이트 단위로 데이터를 저장(write)하거나 읽어(read)들인다.
- 메모리 주소(memory address)는 각 셀이 고유하게 가지고 있는 메모리 공간의 위치 값이다. 메모리 크기 범위의 정수값이다.</br>
    ___ex) 4GB 메모리는 `0x00000000` ~ `0xFFFFFFFF`의 주소를 갖는다.___

![](https://user-images.githubusercontent.com/66757141/212366880-e8c326bf-213a-4c69-a681-850c2dd33ff6.png)
[**_이미지 ref)_**](https://velog.io/@chillihc/JavaScript-%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-Deep-Dive%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-JS-3-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD%EA%B3%BC-%EC%8B%A4%ED%96%89-%EB%B0%A9%EB%B2%95-ytv11p6z)

## **변수의 필요성**
다음과 같은 이유로 메모리 주소로 데이터에 직접 접근할 수 없다.
1. 자바스크립트는 개발자의 직접적 메모리 제어를 허용하지 않는다. 직접적인 메모리 제어를 할 시 의도치 않은 수정으로 치명적인 문제가 발생할 수 있기 때문이다.
2. 값이 저장될 메모리의 주소는 코드가 실행될 때, 메모리의 상황에 따라 임의로 결정되기 때문에 사전에 메모리 주소를 알 수 없다.

따라서 프로그래밍 언어는 값을 메모리에 저장하고, 저장된 값을 읽어 들여 재사용하기 위해 변수라는 메커니즘을 제공한다.

___
</br>

## 🚀**4.1 변수**
변수(Variable)는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다.<br>
프로그래밍 언어에서 변수는 **컴파일러** 또는 **인터프리터**에 의해 값이 저장된 메모리 공간의 주소로 치환되어 실행된다. 직접 메모리 주소를 사용하지 않아 안전하다.
![](https://user-images.githubusercontent.com/66757141/212366913-43851008-c858-4776-8925-30ded9877fb2.png)
[**_이미지 ref)_**](https://velog.io/@chillihc/JavaScript-%EB%AA%A8%EB%8D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-Deep-Dive%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-JS-3-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD%EA%B3%BC-%EC%8B%A4%ED%96%89-%EB%B0%A9%EB%B2%95-ytv11p6z)
### 용어 정리
- `변수이름` : 메모리 공간에 저장된 값을 식별할 수 있는 고유한 이름, 변수명
- 


## 🚀**1.2 프로그래밍 언어**